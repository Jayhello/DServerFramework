// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LogicServerWithConnectionServer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LogicServerWithConnectionServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace internalAgreement {

namespace {

const ::google::protobuf::Descriptor* UpstreamACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpstreamACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseClientACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseClientACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownstreamACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownstreamACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicServerLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicServerLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicServerLoginReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicServerLoginReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicServerKickPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicServerKickPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicServerSetRoleSlave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicServerSetRoleSlave_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_LogicServerWithConnectionServer_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_LogicServerWithConnectionServer_2eproto() {
  protobuf_AddDesc_LogicServerWithConnectionServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LogicServerWithConnectionServer.proto");
  GOOGLE_CHECK(file != NULL);
  UpstreamACK_descriptor_ = file->message_type(0);
  static const int UpstreamACK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpstreamACK, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpstreamACK, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpstreamACK, clientid_),
  };
  UpstreamACK_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpstreamACK_descriptor_,
      UpstreamACK::default_instance_,
      UpstreamACK_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpstreamACK),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpstreamACK, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpstreamACK, _is_default_instance_));
  CloseClientACK_descriptor_ = file->message_type(1);
  static const int CloseClientACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseClientACK, clientid_),
  };
  CloseClientACK_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CloseClientACK_descriptor_,
      CloseClientACK::default_instance_,
      CloseClientACK_offsets_,
      -1,
      -1,
      -1,
      sizeof(CloseClientACK),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseClientACK, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseClientACK, _is_default_instance_));
  DownstreamACK_descriptor_ = file->message_type(2);
  static const int DownstreamACK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownstreamACK, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownstreamACK, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownstreamACK, clientid_),
  };
  DownstreamACK_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DownstreamACK_descriptor_,
      DownstreamACK::default_instance_,
      DownstreamACK_offsets_,
      -1,
      -1,
      -1,
      sizeof(DownstreamACK),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownstreamACK, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownstreamACK, _is_default_instance_));
  LogicServerLogin_descriptor_ = file->message_type(3);
  static const int LogicServerLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerLogin, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerLogin, isprimary_),
  };
  LogicServerLogin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogicServerLogin_descriptor_,
      LogicServerLogin::default_instance_,
      LogicServerLogin_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogicServerLogin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerLogin, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerLogin, _is_default_instance_));
  LogicServerLoginReply_descriptor_ = file->message_type(4);
  static const int LogicServerLoginReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerLoginReply, issuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerLoginReply, id_),
  };
  LogicServerLoginReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogicServerLoginReply_descriptor_,
      LogicServerLoginReply::default_instance_,
      LogicServerLoginReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogicServerLoginReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerLoginReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerLoginReply, _is_default_instance_));
  LogicServerKickPlayer_descriptor_ = file->message_type(5);
  static const int LogicServerKickPlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerKickPlayer, roleruntimeid_),
  };
  LogicServerKickPlayer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogicServerKickPlayer_descriptor_,
      LogicServerKickPlayer::default_instance_,
      LogicServerKickPlayer_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogicServerKickPlayer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerKickPlayer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerKickPlayer, _is_default_instance_));
  LogicServerSetRoleSlave_descriptor_ = file->message_type(6);
  static const int LogicServerSetRoleSlave_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerSetRoleSlave, roleruntimeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerSetRoleSlave, isset_),
  };
  LogicServerSetRoleSlave_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogicServerSetRoleSlave_descriptor_,
      LogicServerSetRoleSlave::default_instance_,
      LogicServerSetRoleSlave_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogicServerSetRoleSlave),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerSetRoleSlave, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerSetRoleSlave, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LogicServerWithConnectionServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpstreamACK_descriptor_, &UpstreamACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CloseClientACK_descriptor_, &CloseClientACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DownstreamACK_descriptor_, &DownstreamACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogicServerLogin_descriptor_, &LogicServerLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogicServerLoginReply_descriptor_, &LogicServerLoginReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogicServerKickPlayer_descriptor_, &LogicServerKickPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogicServerSetRoleSlave_descriptor_, &LogicServerSetRoleSlave::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LogicServerWithConnectionServer_2eproto() {
  delete UpstreamACK::default_instance_;
  delete UpstreamACK_reflection_;
  delete CloseClientACK::default_instance_;
  delete CloseClientACK_reflection_;
  delete DownstreamACK::default_instance_;
  delete DownstreamACK_reflection_;
  delete LogicServerLogin::default_instance_;
  delete LogicServerLogin_reflection_;
  delete LogicServerLoginReply::default_instance_;
  delete LogicServerLoginReply_reflection_;
  delete LogicServerKickPlayer::default_instance_;
  delete LogicServerKickPlayer_reflection_;
  delete LogicServerSetRoleSlave::default_instance_;
  delete LogicServerSetRoleSlave_reflection_;
}

void protobuf_AddDesc_LogicServerWithConnectionServer_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_LogicServerWithConnectionServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%LogicServerWithConnectionServer.proto\022"
    "\021internalAgreement\"<\n\013UpstreamACK\022\r\n\005Msg"
    "ID\030\001 \001(\r\022\014\n\004Data\030\002 \001(\014\022\020\n\010ClientID\030\003 \001(\003"
    "\"\"\n\016CloseClientACK\022\020\n\010ClientID\030\001 \001(\003\">\n\r"
    "DownstreamACK\022\r\n\005MsgID\030\001 \001(\r\022\014\n\004Data\030\002 \001"
    "(\014\022\020\n\010ClientID\030\003 \003(\003\"1\n\020LogicServerLogin"
    "\022\n\n\002id\030\001 \001(\005\022\021\n\tisPrimary\030\002 \001(\010\"6\n\025Logic"
    "ServerLoginReply\022\021\n\tisSuccess\030\001 \001(\010\022\n\n\002i"
    "d\030\002 \001(\005\".\n\025LogicServerKickPlayer\022\025\n\rRole"
    "RuntimeID\030\001 \001(\003\"\?\n\027LogicServerSetRoleSla"
    "ve\022\025\n\rRoleRuntimeID\030\001 \001(\003\022\r\n\005isSet\030\002 \001(\010"
    "b\006proto3", 448);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LogicServerWithConnectionServer.proto", &protobuf_RegisterTypes);
  UpstreamACK::default_instance_ = new UpstreamACK();
  CloseClientACK::default_instance_ = new CloseClientACK();
  DownstreamACK::default_instance_ = new DownstreamACK();
  LogicServerLogin::default_instance_ = new LogicServerLogin();
  LogicServerLoginReply::default_instance_ = new LogicServerLoginReply();
  LogicServerKickPlayer::default_instance_ = new LogicServerKickPlayer();
  LogicServerSetRoleSlave::default_instance_ = new LogicServerSetRoleSlave();
  UpstreamACK::default_instance_->InitAsDefaultInstance();
  CloseClientACK::default_instance_->InitAsDefaultInstance();
  DownstreamACK::default_instance_->InitAsDefaultInstance();
  LogicServerLogin::default_instance_->InitAsDefaultInstance();
  LogicServerLoginReply::default_instance_->InitAsDefaultInstance();
  LogicServerKickPlayer::default_instance_->InitAsDefaultInstance();
  LogicServerSetRoleSlave::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LogicServerWithConnectionServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LogicServerWithConnectionServer_2eproto {
  StaticDescriptorInitializer_LogicServerWithConnectionServer_2eproto() {
    protobuf_AddDesc_LogicServerWithConnectionServer_2eproto();
  }
} static_descriptor_initializer_LogicServerWithConnectionServer_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpstreamACK::kMsgIDFieldNumber;
const int UpstreamACK::kDataFieldNumber;
const int UpstreamACK::kClientIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpstreamACK::UpstreamACK()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internalAgreement.UpstreamACK)
}

void UpstreamACK::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UpstreamACK::UpstreamACK(const UpstreamACK& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internalAgreement.UpstreamACK)
}

void UpstreamACK::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 0u;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_ = GOOGLE_LONGLONG(0);
}

UpstreamACK::~UpstreamACK() {
  // @@protoc_insertion_point(destructor:internalAgreement.UpstreamACK)
  SharedDtor();
}

void UpstreamACK::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UpstreamACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpstreamACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpstreamACK_descriptor_;
}

const UpstreamACK& UpstreamACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogicServerWithConnectionServer_2eproto();
  return *default_instance_;
}

UpstreamACK* UpstreamACK::default_instance_ = NULL;

UpstreamACK* UpstreamACK::New(::google::protobuf::Arena* arena) const {
  UpstreamACK* n = new UpstreamACK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpstreamACK::Clear() {
// @@protoc_insertion_point(message_clear_start:internalAgreement.UpstreamACK)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UpstreamACK, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UpstreamACK*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(clientid_, msgid_);
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool UpstreamACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internalAgreement.UpstreamACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MsgID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        break;
      }

      // optional bytes Data = 2;
      case 2: {
        if (tag == 18) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ClientID;
        break;
      }

      // optional int64 ClientID = 3;
      case 3: {
        if (tag == 24) {
         parse_ClientID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clientid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internalAgreement.UpstreamACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internalAgreement.UpstreamACK)
  return false;
#undef DO_
}

void UpstreamACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internalAgreement.UpstreamACK)
  // optional uint32 MsgID = 1;
  if (this->msgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }

  // optional bytes Data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // optional int64 ClientID = 3;
  if (this->clientid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->clientid(), output);
  }

  // @@protoc_insertion_point(serialize_end:internalAgreement.UpstreamACK)
}

::google::protobuf::uint8* UpstreamACK::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internalAgreement.UpstreamACK)
  // optional uint32 MsgID = 1;
  if (this->msgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgid(), target);
  }

  // optional bytes Data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // optional int64 ClientID = 3;
  if (this->clientid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->clientid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:internalAgreement.UpstreamACK)
  return target;
}

int UpstreamACK::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:internalAgreement.UpstreamACK)
  int total_size = 0;

  // optional uint32 MsgID = 1;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());
  }

  // optional bytes Data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // optional int64 ClientID = 3;
  if (this->clientid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->clientid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpstreamACK::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:internalAgreement.UpstreamACK)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UpstreamACK* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UpstreamACK>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:internalAgreement.UpstreamACK)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:internalAgreement.UpstreamACK)
    MergeFrom(*source);
  }
}

void UpstreamACK::MergeFrom(const UpstreamACK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:internalAgreement.UpstreamACK)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.msgid() != 0) {
    set_msgid(from.msgid());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.clientid() != 0) {
    set_clientid(from.clientid());
  }
}

void UpstreamACK::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:internalAgreement.UpstreamACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpstreamACK::CopyFrom(const UpstreamACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:internalAgreement.UpstreamACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpstreamACK::IsInitialized() const {

  return true;
}

void UpstreamACK::Swap(UpstreamACK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpstreamACK::InternalSwap(UpstreamACK* other) {
  std::swap(msgid_, other->msgid_);
  data_.Swap(&other->data_);
  std::swap(clientid_, other->clientid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpstreamACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpstreamACK_descriptor_;
  metadata.reflection = UpstreamACK_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpstreamACK

// optional uint32 MsgID = 1;
void UpstreamACK::clear_msgid() {
  msgid_ = 0u;
}
 ::google::protobuf::uint32 UpstreamACK::msgid() const {
  // @@protoc_insertion_point(field_get:internalAgreement.UpstreamACK.MsgID)
  return msgid_;
}
 void UpstreamACK::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:internalAgreement.UpstreamACK.MsgID)
}

// optional bytes Data = 2;
void UpstreamACK::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpstreamACK::data() const {
  // @@protoc_insertion_point(field_get:internalAgreement.UpstreamACK.Data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpstreamACK::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:internalAgreement.UpstreamACK.Data)
}
 void UpstreamACK::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:internalAgreement.UpstreamACK.Data)
}
 void UpstreamACK::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:internalAgreement.UpstreamACK.Data)
}
 ::std::string* UpstreamACK::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:internalAgreement.UpstreamACK.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpstreamACK::release_data() {
  // @@protoc_insertion_point(field_release:internalAgreement.UpstreamACK.Data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpstreamACK::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:internalAgreement.UpstreamACK.Data)
}

// optional int64 ClientID = 3;
void UpstreamACK::clear_clientid() {
  clientid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 UpstreamACK::clientid() const {
  // @@protoc_insertion_point(field_get:internalAgreement.UpstreamACK.ClientID)
  return clientid_;
}
 void UpstreamACK::set_clientid(::google::protobuf::int64 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:internalAgreement.UpstreamACK.ClientID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloseClientACK::kClientIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloseClientACK::CloseClientACK()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internalAgreement.CloseClientACK)
}

void CloseClientACK::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CloseClientACK::CloseClientACK(const CloseClientACK& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internalAgreement.CloseClientACK)
}

void CloseClientACK::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clientid_ = GOOGLE_LONGLONG(0);
}

CloseClientACK::~CloseClientACK() {
  // @@protoc_insertion_point(destructor:internalAgreement.CloseClientACK)
  SharedDtor();
}

void CloseClientACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CloseClientACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseClientACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseClientACK_descriptor_;
}

const CloseClientACK& CloseClientACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogicServerWithConnectionServer_2eproto();
  return *default_instance_;
}

CloseClientACK* CloseClientACK::default_instance_ = NULL;

CloseClientACK* CloseClientACK::New(::google::protobuf::Arena* arena) const {
  CloseClientACK* n = new CloseClientACK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloseClientACK::Clear() {
// @@protoc_insertion_point(message_clear_start:internalAgreement.CloseClientACK)
  clientid_ = GOOGLE_LONGLONG(0);
}

bool CloseClientACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internalAgreement.CloseClientACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ClientID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clientid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internalAgreement.CloseClientACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internalAgreement.CloseClientACK)
  return false;
#undef DO_
}

void CloseClientACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internalAgreement.CloseClientACK)
  // optional int64 ClientID = 1;
  if (this->clientid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->clientid(), output);
  }

  // @@protoc_insertion_point(serialize_end:internalAgreement.CloseClientACK)
}

::google::protobuf::uint8* CloseClientACK::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internalAgreement.CloseClientACK)
  // optional int64 ClientID = 1;
  if (this->clientid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->clientid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:internalAgreement.CloseClientACK)
  return target;
}

int CloseClientACK::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:internalAgreement.CloseClientACK)
  int total_size = 0;

  // optional int64 ClientID = 1;
  if (this->clientid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->clientid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseClientACK::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:internalAgreement.CloseClientACK)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CloseClientACK* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CloseClientACK>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:internalAgreement.CloseClientACK)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:internalAgreement.CloseClientACK)
    MergeFrom(*source);
  }
}

void CloseClientACK::MergeFrom(const CloseClientACK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:internalAgreement.CloseClientACK)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.clientid() != 0) {
    set_clientid(from.clientid());
  }
}

void CloseClientACK::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:internalAgreement.CloseClientACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseClientACK::CopyFrom(const CloseClientACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:internalAgreement.CloseClientACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseClientACK::IsInitialized() const {

  return true;
}

void CloseClientACK::Swap(CloseClientACK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloseClientACK::InternalSwap(CloseClientACK* other) {
  std::swap(clientid_, other->clientid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloseClientACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseClientACK_descriptor_;
  metadata.reflection = CloseClientACK_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloseClientACK

// optional int64 ClientID = 1;
void CloseClientACK::clear_clientid() {
  clientid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CloseClientACK::clientid() const {
  // @@protoc_insertion_point(field_get:internalAgreement.CloseClientACK.ClientID)
  return clientid_;
}
 void CloseClientACK::set_clientid(::google::protobuf::int64 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:internalAgreement.CloseClientACK.ClientID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DownstreamACK::kMsgIDFieldNumber;
const int DownstreamACK::kDataFieldNumber;
const int DownstreamACK::kClientIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DownstreamACK::DownstreamACK()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internalAgreement.DownstreamACK)
}

void DownstreamACK::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DownstreamACK::DownstreamACK(const DownstreamACK& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internalAgreement.DownstreamACK)
}

void DownstreamACK::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 0u;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DownstreamACK::~DownstreamACK() {
  // @@protoc_insertion_point(destructor:internalAgreement.DownstreamACK)
  SharedDtor();
}

void DownstreamACK::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DownstreamACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownstreamACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownstreamACK_descriptor_;
}

const DownstreamACK& DownstreamACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogicServerWithConnectionServer_2eproto();
  return *default_instance_;
}

DownstreamACK* DownstreamACK::default_instance_ = NULL;

DownstreamACK* DownstreamACK::New(::google::protobuf::Arena* arena) const {
  DownstreamACK* n = new DownstreamACK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DownstreamACK::Clear() {
// @@protoc_insertion_point(message_clear_start:internalAgreement.DownstreamACK)
  msgid_ = 0u;
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_.Clear();
}

bool DownstreamACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internalAgreement.DownstreamACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MsgID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        break;
      }

      // optional bytes Data = 2;
      case 2: {
        if (tag == 18) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ClientID;
        break;
      }

      // repeated int64 ClientID = 3;
      case 3: {
        if (tag == 26) {
         parse_ClientID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_clientid())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26, input, this->mutable_clientid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internalAgreement.DownstreamACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internalAgreement.DownstreamACK)
  return false;
#undef DO_
}

void DownstreamACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internalAgreement.DownstreamACK)
  // optional uint32 MsgID = 1;
  if (this->msgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }

  // optional bytes Data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // repeated int64 ClientID = 3;
  if (this->clientid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_clientid_cached_byte_size_);
  }
  for (int i = 0; i < this->clientid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->clientid(i), output);
  }

  // @@protoc_insertion_point(serialize_end:internalAgreement.DownstreamACK)
}

::google::protobuf::uint8* DownstreamACK::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internalAgreement.DownstreamACK)
  // optional uint32 MsgID = 1;
  if (this->msgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgid(), target);
  }

  // optional bytes Data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // repeated int64 ClientID = 3;
  if (this->clientid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _clientid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->clientid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->clientid(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:internalAgreement.DownstreamACK)
  return target;
}

int DownstreamACK::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:internalAgreement.DownstreamACK)
  int total_size = 0;

  // optional uint32 MsgID = 1;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());
  }

  // optional bytes Data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // repeated int64 ClientID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->clientid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->clientid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _clientid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownstreamACK::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:internalAgreement.DownstreamACK)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DownstreamACK* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DownstreamACK>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:internalAgreement.DownstreamACK)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:internalAgreement.DownstreamACK)
    MergeFrom(*source);
  }
}

void DownstreamACK::MergeFrom(const DownstreamACK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:internalAgreement.DownstreamACK)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  clientid_.MergeFrom(from.clientid_);
  if (from.msgid() != 0) {
    set_msgid(from.msgid());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void DownstreamACK::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:internalAgreement.DownstreamACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownstreamACK::CopyFrom(const DownstreamACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:internalAgreement.DownstreamACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownstreamACK::IsInitialized() const {

  return true;
}

void DownstreamACK::Swap(DownstreamACK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DownstreamACK::InternalSwap(DownstreamACK* other) {
  std::swap(msgid_, other->msgid_);
  data_.Swap(&other->data_);
  clientid_.UnsafeArenaSwap(&other->clientid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DownstreamACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownstreamACK_descriptor_;
  metadata.reflection = DownstreamACK_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DownstreamACK

// optional uint32 MsgID = 1;
void DownstreamACK::clear_msgid() {
  msgid_ = 0u;
}
 ::google::protobuf::uint32 DownstreamACK::msgid() const {
  // @@protoc_insertion_point(field_get:internalAgreement.DownstreamACK.MsgID)
  return msgid_;
}
 void DownstreamACK::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:internalAgreement.DownstreamACK.MsgID)
}

// optional bytes Data = 2;
void DownstreamACK::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DownstreamACK::data() const {
  // @@protoc_insertion_point(field_get:internalAgreement.DownstreamACK.Data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DownstreamACK::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:internalAgreement.DownstreamACK.Data)
}
 void DownstreamACK::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:internalAgreement.DownstreamACK.Data)
}
 void DownstreamACK::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:internalAgreement.DownstreamACK.Data)
}
 ::std::string* DownstreamACK::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:internalAgreement.DownstreamACK.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DownstreamACK::release_data() {
  // @@protoc_insertion_point(field_release:internalAgreement.DownstreamACK.Data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DownstreamACK::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:internalAgreement.DownstreamACK.Data)
}

// repeated int64 ClientID = 3;
int DownstreamACK::clientid_size() const {
  return clientid_.size();
}
void DownstreamACK::clear_clientid() {
  clientid_.Clear();
}
 ::google::protobuf::int64 DownstreamACK::clientid(int index) const {
  // @@protoc_insertion_point(field_get:internalAgreement.DownstreamACK.ClientID)
  return clientid_.Get(index);
}
 void DownstreamACK::set_clientid(int index, ::google::protobuf::int64 value) {
  clientid_.Set(index, value);
  // @@protoc_insertion_point(field_set:internalAgreement.DownstreamACK.ClientID)
}
 void DownstreamACK::add_clientid(::google::protobuf::int64 value) {
  clientid_.Add(value);
  // @@protoc_insertion_point(field_add:internalAgreement.DownstreamACK.ClientID)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DownstreamACK::clientid() const {
  // @@protoc_insertion_point(field_list:internalAgreement.DownstreamACK.ClientID)
  return clientid_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DownstreamACK::mutable_clientid() {
  // @@protoc_insertion_point(field_mutable_list:internalAgreement.DownstreamACK.ClientID)
  return &clientid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogicServerLogin::kIdFieldNumber;
const int LogicServerLogin::kIsPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogicServerLogin::LogicServerLogin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internalAgreement.LogicServerLogin)
}

void LogicServerLogin::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LogicServerLogin::LogicServerLogin(const LogicServerLogin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internalAgreement.LogicServerLogin)
}

void LogicServerLogin::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
  isprimary_ = false;
}

LogicServerLogin::~LogicServerLogin() {
  // @@protoc_insertion_point(destructor:internalAgreement.LogicServerLogin)
  SharedDtor();
}

void LogicServerLogin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicServerLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicServerLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicServerLogin_descriptor_;
}

const LogicServerLogin& LogicServerLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogicServerWithConnectionServer_2eproto();
  return *default_instance_;
}

LogicServerLogin* LogicServerLogin::default_instance_ = NULL;

LogicServerLogin* LogicServerLogin::New(::google::protobuf::Arena* arena) const {
  LogicServerLogin* n = new LogicServerLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogicServerLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:internalAgreement.LogicServerLogin)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LogicServerLogin, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LogicServerLogin*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, isprimary_);

#undef ZR_HELPER_
#undef ZR_

}

bool LogicServerLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internalAgreement.LogicServerLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isPrimary;
        break;
      }

      // optional bool isPrimary = 2;
      case 2: {
        if (tag == 16) {
         parse_isPrimary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isprimary_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internalAgreement.LogicServerLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internalAgreement.LogicServerLogin)
  return false;
#undef DO_
}

void LogicServerLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internalAgreement.LogicServerLogin)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bool isPrimary = 2;
  if (this->isprimary() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isprimary(), output);
  }

  // @@protoc_insertion_point(serialize_end:internalAgreement.LogicServerLogin)
}

::google::protobuf::uint8* LogicServerLogin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internalAgreement.LogicServerLogin)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bool isPrimary = 2;
  if (this->isprimary() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isprimary(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:internalAgreement.LogicServerLogin)
  return target;
}

int LogicServerLogin::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:internalAgreement.LogicServerLogin)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional bool isPrimary = 2;
  if (this->isprimary() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicServerLogin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:internalAgreement.LogicServerLogin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogicServerLogin* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogicServerLogin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:internalAgreement.LogicServerLogin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:internalAgreement.LogicServerLogin)
    MergeFrom(*source);
  }
}

void LogicServerLogin::MergeFrom(const LogicServerLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:internalAgreement.LogicServerLogin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.isprimary() != 0) {
    set_isprimary(from.isprimary());
  }
}

void LogicServerLogin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:internalAgreement.LogicServerLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicServerLogin::CopyFrom(const LogicServerLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:internalAgreement.LogicServerLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicServerLogin::IsInitialized() const {

  return true;
}

void LogicServerLogin::Swap(LogicServerLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogicServerLogin::InternalSwap(LogicServerLogin* other) {
  std::swap(id_, other->id_);
  std::swap(isprimary_, other->isprimary_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogicServerLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicServerLogin_descriptor_;
  metadata.reflection = LogicServerLogin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogicServerLogin

// optional int32 id = 1;
void LogicServerLogin::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 LogicServerLogin::id() const {
  // @@protoc_insertion_point(field_get:internalAgreement.LogicServerLogin.id)
  return id_;
}
 void LogicServerLogin::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:internalAgreement.LogicServerLogin.id)
}

// optional bool isPrimary = 2;
void LogicServerLogin::clear_isprimary() {
  isprimary_ = false;
}
 bool LogicServerLogin::isprimary() const {
  // @@protoc_insertion_point(field_get:internalAgreement.LogicServerLogin.isPrimary)
  return isprimary_;
}
 void LogicServerLogin::set_isprimary(bool value) {
  
  isprimary_ = value;
  // @@protoc_insertion_point(field_set:internalAgreement.LogicServerLogin.isPrimary)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogicServerLoginReply::kIsSuccessFieldNumber;
const int LogicServerLoginReply::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogicServerLoginReply::LogicServerLoginReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internalAgreement.LogicServerLoginReply)
}

void LogicServerLoginReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LogicServerLoginReply::LogicServerLoginReply(const LogicServerLoginReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internalAgreement.LogicServerLoginReply)
}

void LogicServerLoginReply::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  issuccess_ = false;
  id_ = 0;
}

LogicServerLoginReply::~LogicServerLoginReply() {
  // @@protoc_insertion_point(destructor:internalAgreement.LogicServerLoginReply)
  SharedDtor();
}

void LogicServerLoginReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicServerLoginReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicServerLoginReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicServerLoginReply_descriptor_;
}

const LogicServerLoginReply& LogicServerLoginReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogicServerWithConnectionServer_2eproto();
  return *default_instance_;
}

LogicServerLoginReply* LogicServerLoginReply::default_instance_ = NULL;

LogicServerLoginReply* LogicServerLoginReply::New(::google::protobuf::Arena* arena) const {
  LogicServerLoginReply* n = new LogicServerLoginReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogicServerLoginReply::Clear() {
// @@protoc_insertion_point(message_clear_start:internalAgreement.LogicServerLoginReply)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LogicServerLoginReply, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LogicServerLoginReply*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(issuccess_, id_);

#undef ZR_HELPER_
#undef ZR_

}

bool LogicServerLoginReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internalAgreement.LogicServerLoginReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isSuccess = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuccess_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internalAgreement.LogicServerLoginReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internalAgreement.LogicServerLoginReply)
  return false;
#undef DO_
}

void LogicServerLoginReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internalAgreement.LogicServerLoginReply)
  // optional bool isSuccess = 1;
  if (this->issuccess() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->issuccess(), output);
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:internalAgreement.LogicServerLoginReply)
}

::google::protobuf::uint8* LogicServerLoginReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internalAgreement.LogicServerLoginReply)
  // optional bool isSuccess = 1;
  if (this->issuccess() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->issuccess(), target);
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:internalAgreement.LogicServerLoginReply)
  return target;
}

int LogicServerLoginReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:internalAgreement.LogicServerLoginReply)
  int total_size = 0;

  // optional bool isSuccess = 1;
  if (this->issuccess() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicServerLoginReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:internalAgreement.LogicServerLoginReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogicServerLoginReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogicServerLoginReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:internalAgreement.LogicServerLoginReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:internalAgreement.LogicServerLoginReply)
    MergeFrom(*source);
  }
}

void LogicServerLoginReply::MergeFrom(const LogicServerLoginReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:internalAgreement.LogicServerLoginReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.issuccess() != 0) {
    set_issuccess(from.issuccess());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void LogicServerLoginReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:internalAgreement.LogicServerLoginReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicServerLoginReply::CopyFrom(const LogicServerLoginReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:internalAgreement.LogicServerLoginReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicServerLoginReply::IsInitialized() const {

  return true;
}

void LogicServerLoginReply::Swap(LogicServerLoginReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogicServerLoginReply::InternalSwap(LogicServerLoginReply* other) {
  std::swap(issuccess_, other->issuccess_);
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogicServerLoginReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicServerLoginReply_descriptor_;
  metadata.reflection = LogicServerLoginReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogicServerLoginReply

// optional bool isSuccess = 1;
void LogicServerLoginReply::clear_issuccess() {
  issuccess_ = false;
}
 bool LogicServerLoginReply::issuccess() const {
  // @@protoc_insertion_point(field_get:internalAgreement.LogicServerLoginReply.isSuccess)
  return issuccess_;
}
 void LogicServerLoginReply::set_issuccess(bool value) {
  
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:internalAgreement.LogicServerLoginReply.isSuccess)
}

// optional int32 id = 2;
void LogicServerLoginReply::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 LogicServerLoginReply::id() const {
  // @@protoc_insertion_point(field_get:internalAgreement.LogicServerLoginReply.id)
  return id_;
}
 void LogicServerLoginReply::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:internalAgreement.LogicServerLoginReply.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogicServerKickPlayer::kRoleRuntimeIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogicServerKickPlayer::LogicServerKickPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internalAgreement.LogicServerKickPlayer)
}

void LogicServerKickPlayer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LogicServerKickPlayer::LogicServerKickPlayer(const LogicServerKickPlayer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internalAgreement.LogicServerKickPlayer)
}

void LogicServerKickPlayer::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  roleruntimeid_ = GOOGLE_LONGLONG(0);
}

LogicServerKickPlayer::~LogicServerKickPlayer() {
  // @@protoc_insertion_point(destructor:internalAgreement.LogicServerKickPlayer)
  SharedDtor();
}

void LogicServerKickPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicServerKickPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicServerKickPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicServerKickPlayer_descriptor_;
}

const LogicServerKickPlayer& LogicServerKickPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogicServerWithConnectionServer_2eproto();
  return *default_instance_;
}

LogicServerKickPlayer* LogicServerKickPlayer::default_instance_ = NULL;

LogicServerKickPlayer* LogicServerKickPlayer::New(::google::protobuf::Arena* arena) const {
  LogicServerKickPlayer* n = new LogicServerKickPlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogicServerKickPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:internalAgreement.LogicServerKickPlayer)
  roleruntimeid_ = GOOGLE_LONGLONG(0);
}

bool LogicServerKickPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internalAgreement.LogicServerKickPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 RoleRuntimeID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleruntimeid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internalAgreement.LogicServerKickPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internalAgreement.LogicServerKickPlayer)
  return false;
#undef DO_
}

void LogicServerKickPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internalAgreement.LogicServerKickPlayer)
  // optional int64 RoleRuntimeID = 1;
  if (this->roleruntimeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleruntimeid(), output);
  }

  // @@protoc_insertion_point(serialize_end:internalAgreement.LogicServerKickPlayer)
}

::google::protobuf::uint8* LogicServerKickPlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internalAgreement.LogicServerKickPlayer)
  // optional int64 RoleRuntimeID = 1;
  if (this->roleruntimeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleruntimeid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:internalAgreement.LogicServerKickPlayer)
  return target;
}

int LogicServerKickPlayer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:internalAgreement.LogicServerKickPlayer)
  int total_size = 0;

  // optional int64 RoleRuntimeID = 1;
  if (this->roleruntimeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roleruntimeid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicServerKickPlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:internalAgreement.LogicServerKickPlayer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogicServerKickPlayer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogicServerKickPlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:internalAgreement.LogicServerKickPlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:internalAgreement.LogicServerKickPlayer)
    MergeFrom(*source);
  }
}

void LogicServerKickPlayer::MergeFrom(const LogicServerKickPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:internalAgreement.LogicServerKickPlayer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.roleruntimeid() != 0) {
    set_roleruntimeid(from.roleruntimeid());
  }
}

void LogicServerKickPlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:internalAgreement.LogicServerKickPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicServerKickPlayer::CopyFrom(const LogicServerKickPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:internalAgreement.LogicServerKickPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicServerKickPlayer::IsInitialized() const {

  return true;
}

void LogicServerKickPlayer::Swap(LogicServerKickPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogicServerKickPlayer::InternalSwap(LogicServerKickPlayer* other) {
  std::swap(roleruntimeid_, other->roleruntimeid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogicServerKickPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicServerKickPlayer_descriptor_;
  metadata.reflection = LogicServerKickPlayer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogicServerKickPlayer

// optional int64 RoleRuntimeID = 1;
void LogicServerKickPlayer::clear_roleruntimeid() {
  roleruntimeid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 LogicServerKickPlayer::roleruntimeid() const {
  // @@protoc_insertion_point(field_get:internalAgreement.LogicServerKickPlayer.RoleRuntimeID)
  return roleruntimeid_;
}
 void LogicServerKickPlayer::set_roleruntimeid(::google::protobuf::int64 value) {
  
  roleruntimeid_ = value;
  // @@protoc_insertion_point(field_set:internalAgreement.LogicServerKickPlayer.RoleRuntimeID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogicServerSetRoleSlave::kRoleRuntimeIDFieldNumber;
const int LogicServerSetRoleSlave::kIsSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogicServerSetRoleSlave::LogicServerSetRoleSlave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internalAgreement.LogicServerSetRoleSlave)
}

void LogicServerSetRoleSlave::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LogicServerSetRoleSlave::LogicServerSetRoleSlave(const LogicServerSetRoleSlave& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internalAgreement.LogicServerSetRoleSlave)
}

void LogicServerSetRoleSlave::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  roleruntimeid_ = GOOGLE_LONGLONG(0);
  isset_ = false;
}

LogicServerSetRoleSlave::~LogicServerSetRoleSlave() {
  // @@protoc_insertion_point(destructor:internalAgreement.LogicServerSetRoleSlave)
  SharedDtor();
}

void LogicServerSetRoleSlave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicServerSetRoleSlave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicServerSetRoleSlave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicServerSetRoleSlave_descriptor_;
}

const LogicServerSetRoleSlave& LogicServerSetRoleSlave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogicServerWithConnectionServer_2eproto();
  return *default_instance_;
}

LogicServerSetRoleSlave* LogicServerSetRoleSlave::default_instance_ = NULL;

LogicServerSetRoleSlave* LogicServerSetRoleSlave::New(::google::protobuf::Arena* arena) const {
  LogicServerSetRoleSlave* n = new LogicServerSetRoleSlave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogicServerSetRoleSlave::Clear() {
// @@protoc_insertion_point(message_clear_start:internalAgreement.LogicServerSetRoleSlave)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LogicServerSetRoleSlave, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LogicServerSetRoleSlave*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(roleruntimeid_, isset_);

#undef ZR_HELPER_
#undef ZR_

}

bool LogicServerSetRoleSlave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internalAgreement.LogicServerSetRoleSlave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 RoleRuntimeID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleruntimeid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isSet;
        break;
      }

      // optional bool isSet = 2;
      case 2: {
        if (tag == 16) {
         parse_isSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isset_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internalAgreement.LogicServerSetRoleSlave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internalAgreement.LogicServerSetRoleSlave)
  return false;
#undef DO_
}

void LogicServerSetRoleSlave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internalAgreement.LogicServerSetRoleSlave)
  // optional int64 RoleRuntimeID = 1;
  if (this->roleruntimeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleruntimeid(), output);
  }

  // optional bool isSet = 2;
  if (this->isset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isset(), output);
  }

  // @@protoc_insertion_point(serialize_end:internalAgreement.LogicServerSetRoleSlave)
}

::google::protobuf::uint8* LogicServerSetRoleSlave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internalAgreement.LogicServerSetRoleSlave)
  // optional int64 RoleRuntimeID = 1;
  if (this->roleruntimeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleruntimeid(), target);
  }

  // optional bool isSet = 2;
  if (this->isset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isset(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:internalAgreement.LogicServerSetRoleSlave)
  return target;
}

int LogicServerSetRoleSlave::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:internalAgreement.LogicServerSetRoleSlave)
  int total_size = 0;

  // optional int64 RoleRuntimeID = 1;
  if (this->roleruntimeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roleruntimeid());
  }

  // optional bool isSet = 2;
  if (this->isset() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicServerSetRoleSlave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:internalAgreement.LogicServerSetRoleSlave)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogicServerSetRoleSlave* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogicServerSetRoleSlave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:internalAgreement.LogicServerSetRoleSlave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:internalAgreement.LogicServerSetRoleSlave)
    MergeFrom(*source);
  }
}

void LogicServerSetRoleSlave::MergeFrom(const LogicServerSetRoleSlave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:internalAgreement.LogicServerSetRoleSlave)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.roleruntimeid() != 0) {
    set_roleruntimeid(from.roleruntimeid());
  }
  if (from.isset() != 0) {
    set_isset(from.isset());
  }
}

void LogicServerSetRoleSlave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:internalAgreement.LogicServerSetRoleSlave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicServerSetRoleSlave::CopyFrom(const LogicServerSetRoleSlave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:internalAgreement.LogicServerSetRoleSlave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicServerSetRoleSlave::IsInitialized() const {

  return true;
}

void LogicServerSetRoleSlave::Swap(LogicServerSetRoleSlave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogicServerSetRoleSlave::InternalSwap(LogicServerSetRoleSlave* other) {
  std::swap(roleruntimeid_, other->roleruntimeid_);
  std::swap(isset_, other->isset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogicServerSetRoleSlave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicServerSetRoleSlave_descriptor_;
  metadata.reflection = LogicServerSetRoleSlave_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogicServerSetRoleSlave

// optional int64 RoleRuntimeID = 1;
void LogicServerSetRoleSlave::clear_roleruntimeid() {
  roleruntimeid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 LogicServerSetRoleSlave::roleruntimeid() const {
  // @@protoc_insertion_point(field_get:internalAgreement.LogicServerSetRoleSlave.RoleRuntimeID)
  return roleruntimeid_;
}
 void LogicServerSetRoleSlave::set_roleruntimeid(::google::protobuf::int64 value) {
  
  roleruntimeid_ = value;
  // @@protoc_insertion_point(field_set:internalAgreement.LogicServerSetRoleSlave.RoleRuntimeID)
}

// optional bool isSet = 2;
void LogicServerSetRoleSlave::clear_isset() {
  isset_ = false;
}
 bool LogicServerSetRoleSlave::isset() const {
  // @@protoc_insertion_point(field_get:internalAgreement.LogicServerSetRoleSlave.isSet)
  return isset_;
}
 void LogicServerSetRoleSlave::set_isset(bool value) {
  
  isset_ = value;
  // @@protoc_insertion_point(field_set:internalAgreement.LogicServerSetRoleSlave.isSet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace internalAgreement

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LogicServerWithConnectionServer.proto

#ifndef PROTOBUF_LogicServerWithConnectionServer_2eproto__INCLUDED
#define PROTOBUF_LogicServerWithConnectionServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace internalAgreement {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_LogicServerWithConnectionServer_2eproto();
void protobuf_AssignDesc_LogicServerWithConnectionServer_2eproto();
void protobuf_ShutdownFile_LogicServerWithConnectionServer_2eproto();

class CloseClientACK;
class DownstreamACK;
class LogicServerKickPlayer;
class LogicServerLogin;
class LogicServerLoginReply;
class LogicServerSetRoleSlave;
class UpstreamACK;

// ===================================================================

class UpstreamACK : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:internalAgreement.UpstreamACK) */ {
 public:
  UpstreamACK();
  virtual ~UpstreamACK();

  UpstreamACK(const UpstreamACK& from);

  inline UpstreamACK& operator=(const UpstreamACK& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpstreamACK& default_instance();

  void Swap(UpstreamACK* other);

  // implements Message ----------------------------------------------

  inline UpstreamACK* New() const { return New(NULL); }

  UpstreamACK* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpstreamACK& from);
  void MergeFrom(const UpstreamACK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpstreamACK* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MsgID = 1;
  void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // optional bytes Data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional int64 ClientID = 3;
  void clear_clientid();
  static const int kClientIDFieldNumber = 3;
  ::google::protobuf::int64 clientid() const;
  void set_clientid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:internalAgreement.UpstreamACK)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int64 clientid_;
  ::google::protobuf::uint32 msgid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_LogicServerWithConnectionServer_2eproto();
  friend void protobuf_AssignDesc_LogicServerWithConnectionServer_2eproto();
  friend void protobuf_ShutdownFile_LogicServerWithConnectionServer_2eproto();

  void InitAsDefaultInstance();
  static UpstreamACK* default_instance_;
};
// -------------------------------------------------------------------

class CloseClientACK : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:internalAgreement.CloseClientACK) */ {
 public:
  CloseClientACK();
  virtual ~CloseClientACK();

  CloseClientACK(const CloseClientACK& from);

  inline CloseClientACK& operator=(const CloseClientACK& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseClientACK& default_instance();

  void Swap(CloseClientACK* other);

  // implements Message ----------------------------------------------

  inline CloseClientACK* New() const { return New(NULL); }

  CloseClientACK* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloseClientACK& from);
  void MergeFrom(const CloseClientACK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CloseClientACK* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 ClientID = 1;
  void clear_clientid();
  static const int kClientIDFieldNumber = 1;
  ::google::protobuf::int64 clientid() const;
  void set_clientid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:internalAgreement.CloseClientACK)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 clientid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_LogicServerWithConnectionServer_2eproto();
  friend void protobuf_AssignDesc_LogicServerWithConnectionServer_2eproto();
  friend void protobuf_ShutdownFile_LogicServerWithConnectionServer_2eproto();

  void InitAsDefaultInstance();
  static CloseClientACK* default_instance_;
};
// -------------------------------------------------------------------

class DownstreamACK : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:internalAgreement.DownstreamACK) */ {
 public:
  DownstreamACK();
  virtual ~DownstreamACK();

  DownstreamACK(const DownstreamACK& from);

  inline DownstreamACK& operator=(const DownstreamACK& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DownstreamACK& default_instance();

  void Swap(DownstreamACK* other);

  // implements Message ----------------------------------------------

  inline DownstreamACK* New() const { return New(NULL); }

  DownstreamACK* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DownstreamACK& from);
  void MergeFrom(const DownstreamACK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DownstreamACK* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MsgID = 1;
  void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // optional bytes Data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // repeated int64 ClientID = 3;
  int clientid_size() const;
  void clear_clientid();
  static const int kClientIDFieldNumber = 3;
  ::google::protobuf::int64 clientid(int index) const;
  void set_clientid(int index, ::google::protobuf::int64 value);
  void add_clientid(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      clientid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_clientid();

  // @@protoc_insertion_point(class_scope:internalAgreement.DownstreamACK)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > clientid_;
  mutable int _clientid_cached_byte_size_;
  ::google::protobuf::uint32 msgid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_LogicServerWithConnectionServer_2eproto();
  friend void protobuf_AssignDesc_LogicServerWithConnectionServer_2eproto();
  friend void protobuf_ShutdownFile_LogicServerWithConnectionServer_2eproto();

  void InitAsDefaultInstance();
  static DownstreamACK* default_instance_;
};
// -------------------------------------------------------------------

class LogicServerLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:internalAgreement.LogicServerLogin) */ {
 public:
  LogicServerLogin();
  virtual ~LogicServerLogin();

  LogicServerLogin(const LogicServerLogin& from);

  inline LogicServerLogin& operator=(const LogicServerLogin& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogicServerLogin& default_instance();

  void Swap(LogicServerLogin* other);

  // implements Message ----------------------------------------------

  inline LogicServerLogin* New() const { return New(NULL); }

  LogicServerLogin* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogicServerLogin& from);
  void MergeFrom(const LogicServerLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogicServerLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional bool isPrimary = 2;
  void clear_isprimary();
  static const int kIsPrimaryFieldNumber = 2;
  bool isprimary() const;
  void set_isprimary(bool value);

  // @@protoc_insertion_point(class_scope:internalAgreement.LogicServerLogin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 id_;
  bool isprimary_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_LogicServerWithConnectionServer_2eproto();
  friend void protobuf_AssignDesc_LogicServerWithConnectionServer_2eproto();
  friend void protobuf_ShutdownFile_LogicServerWithConnectionServer_2eproto();

  void InitAsDefaultInstance();
  static LogicServerLogin* default_instance_;
};
// -------------------------------------------------------------------

class LogicServerLoginReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:internalAgreement.LogicServerLoginReply) */ {
 public:
  LogicServerLoginReply();
  virtual ~LogicServerLoginReply();

  LogicServerLoginReply(const LogicServerLoginReply& from);

  inline LogicServerLoginReply& operator=(const LogicServerLoginReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogicServerLoginReply& default_instance();

  void Swap(LogicServerLoginReply* other);

  // implements Message ----------------------------------------------

  inline LogicServerLoginReply* New() const { return New(NULL); }

  LogicServerLoginReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogicServerLoginReply& from);
  void MergeFrom(const LogicServerLoginReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogicServerLoginReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool isSuccess = 1;
  void clear_issuccess();
  static const int kIsSuccessFieldNumber = 1;
  bool issuccess() const;
  void set_issuccess(bool value);

  // optional int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:internalAgreement.LogicServerLoginReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool issuccess_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_LogicServerWithConnectionServer_2eproto();
  friend void protobuf_AssignDesc_LogicServerWithConnectionServer_2eproto();
  friend void protobuf_ShutdownFile_LogicServerWithConnectionServer_2eproto();

  void InitAsDefaultInstance();
  static LogicServerLoginReply* default_instance_;
};
// -------------------------------------------------------------------

class LogicServerKickPlayer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:internalAgreement.LogicServerKickPlayer) */ {
 public:
  LogicServerKickPlayer();
  virtual ~LogicServerKickPlayer();

  LogicServerKickPlayer(const LogicServerKickPlayer& from);

  inline LogicServerKickPlayer& operator=(const LogicServerKickPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogicServerKickPlayer& default_instance();

  void Swap(LogicServerKickPlayer* other);

  // implements Message ----------------------------------------------

  inline LogicServerKickPlayer* New() const { return New(NULL); }

  LogicServerKickPlayer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogicServerKickPlayer& from);
  void MergeFrom(const LogicServerKickPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogicServerKickPlayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 RoleRuntimeID = 1;
  void clear_roleruntimeid();
  static const int kRoleRuntimeIDFieldNumber = 1;
  ::google::protobuf::int64 roleruntimeid() const;
  void set_roleruntimeid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:internalAgreement.LogicServerKickPlayer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 roleruntimeid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_LogicServerWithConnectionServer_2eproto();
  friend void protobuf_AssignDesc_LogicServerWithConnectionServer_2eproto();
  friend void protobuf_ShutdownFile_LogicServerWithConnectionServer_2eproto();

  void InitAsDefaultInstance();
  static LogicServerKickPlayer* default_instance_;
};
// -------------------------------------------------------------------

class LogicServerSetRoleSlave : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:internalAgreement.LogicServerSetRoleSlave) */ {
 public:
  LogicServerSetRoleSlave();
  virtual ~LogicServerSetRoleSlave();

  LogicServerSetRoleSlave(const LogicServerSetRoleSlave& from);

  inline LogicServerSetRoleSlave& operator=(const LogicServerSetRoleSlave& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogicServerSetRoleSlave& default_instance();

  void Swap(LogicServerSetRoleSlave* other);

  // implements Message ----------------------------------------------

  inline LogicServerSetRoleSlave* New() const { return New(NULL); }

  LogicServerSetRoleSlave* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogicServerSetRoleSlave& from);
  void MergeFrom(const LogicServerSetRoleSlave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogicServerSetRoleSlave* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 RoleRuntimeID = 1;
  void clear_roleruntimeid();
  static const int kRoleRuntimeIDFieldNumber = 1;
  ::google::protobuf::int64 roleruntimeid() const;
  void set_roleruntimeid(::google::protobuf::int64 value);

  // optional bool isSet = 2;
  void clear_isset();
  static const int kIsSetFieldNumber = 2;
  bool isset() const;
  void set_isset(bool value);

  // @@protoc_insertion_point(class_scope:internalAgreement.LogicServerSetRoleSlave)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 roleruntimeid_;
  bool isset_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_LogicServerWithConnectionServer_2eproto();
  friend void protobuf_AssignDesc_LogicServerWithConnectionServer_2eproto();
  friend void protobuf_ShutdownFile_LogicServerWithConnectionServer_2eproto();

  void InitAsDefaultInstance();
  static LogicServerSetRoleSlave* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// UpstreamACK

// optional uint32 MsgID = 1;
inline void UpstreamACK::clear_msgid() {
  msgid_ = 0u;
}
inline ::google::protobuf::uint32 UpstreamACK::msgid() const {
  // @@protoc_insertion_point(field_get:internalAgreement.UpstreamACK.MsgID)
  return msgid_;
}
inline void UpstreamACK::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:internalAgreement.UpstreamACK.MsgID)
}

// optional bytes Data = 2;
inline void UpstreamACK::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpstreamACK::data() const {
  // @@protoc_insertion_point(field_get:internalAgreement.UpstreamACK.Data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpstreamACK::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:internalAgreement.UpstreamACK.Data)
}
inline void UpstreamACK::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:internalAgreement.UpstreamACK.Data)
}
inline void UpstreamACK::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:internalAgreement.UpstreamACK.Data)
}
inline ::std::string* UpstreamACK::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:internalAgreement.UpstreamACK.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpstreamACK::release_data() {
  // @@protoc_insertion_point(field_release:internalAgreement.UpstreamACK.Data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpstreamACK::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:internalAgreement.UpstreamACK.Data)
}

// optional int64 ClientID = 3;
inline void UpstreamACK::clear_clientid() {
  clientid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 UpstreamACK::clientid() const {
  // @@protoc_insertion_point(field_get:internalAgreement.UpstreamACK.ClientID)
  return clientid_;
}
inline void UpstreamACK::set_clientid(::google::protobuf::int64 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:internalAgreement.UpstreamACK.ClientID)
}

// -------------------------------------------------------------------

// CloseClientACK

// optional int64 ClientID = 1;
inline void CloseClientACK::clear_clientid() {
  clientid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CloseClientACK::clientid() const {
  // @@protoc_insertion_point(field_get:internalAgreement.CloseClientACK.ClientID)
  return clientid_;
}
inline void CloseClientACK::set_clientid(::google::protobuf::int64 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:internalAgreement.CloseClientACK.ClientID)
}

// -------------------------------------------------------------------

// DownstreamACK

// optional uint32 MsgID = 1;
inline void DownstreamACK::clear_msgid() {
  msgid_ = 0u;
}
inline ::google::protobuf::uint32 DownstreamACK::msgid() const {
  // @@protoc_insertion_point(field_get:internalAgreement.DownstreamACK.MsgID)
  return msgid_;
}
inline void DownstreamACK::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:internalAgreement.DownstreamACK.MsgID)
}

// optional bytes Data = 2;
inline void DownstreamACK::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DownstreamACK::data() const {
  // @@protoc_insertion_point(field_get:internalAgreement.DownstreamACK.Data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DownstreamACK::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:internalAgreement.DownstreamACK.Data)
}
inline void DownstreamACK::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:internalAgreement.DownstreamACK.Data)
}
inline void DownstreamACK::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:internalAgreement.DownstreamACK.Data)
}
inline ::std::string* DownstreamACK::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:internalAgreement.DownstreamACK.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DownstreamACK::release_data() {
  // @@protoc_insertion_point(field_release:internalAgreement.DownstreamACK.Data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DownstreamACK::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:internalAgreement.DownstreamACK.Data)
}

// repeated int64 ClientID = 3;
inline int DownstreamACK::clientid_size() const {
  return clientid_.size();
}
inline void DownstreamACK::clear_clientid() {
  clientid_.Clear();
}
inline ::google::protobuf::int64 DownstreamACK::clientid(int index) const {
  // @@protoc_insertion_point(field_get:internalAgreement.DownstreamACK.ClientID)
  return clientid_.Get(index);
}
inline void DownstreamACK::set_clientid(int index, ::google::protobuf::int64 value) {
  clientid_.Set(index, value);
  // @@protoc_insertion_point(field_set:internalAgreement.DownstreamACK.ClientID)
}
inline void DownstreamACK::add_clientid(::google::protobuf::int64 value) {
  clientid_.Add(value);
  // @@protoc_insertion_point(field_add:internalAgreement.DownstreamACK.ClientID)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DownstreamACK::clientid() const {
  // @@protoc_insertion_point(field_list:internalAgreement.DownstreamACK.ClientID)
  return clientid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DownstreamACK::mutable_clientid() {
  // @@protoc_insertion_point(field_mutable_list:internalAgreement.DownstreamACK.ClientID)
  return &clientid_;
}

// -------------------------------------------------------------------

// LogicServerLogin

// optional int32 id = 1;
inline void LogicServerLogin::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 LogicServerLogin::id() const {
  // @@protoc_insertion_point(field_get:internalAgreement.LogicServerLogin.id)
  return id_;
}
inline void LogicServerLogin::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:internalAgreement.LogicServerLogin.id)
}

// optional bool isPrimary = 2;
inline void LogicServerLogin::clear_isprimary() {
  isprimary_ = false;
}
inline bool LogicServerLogin::isprimary() const {
  // @@protoc_insertion_point(field_get:internalAgreement.LogicServerLogin.isPrimary)
  return isprimary_;
}
inline void LogicServerLogin::set_isprimary(bool value) {
  
  isprimary_ = value;
  // @@protoc_insertion_point(field_set:internalAgreement.LogicServerLogin.isPrimary)
}

// -------------------------------------------------------------------

// LogicServerLoginReply

// optional bool isSuccess = 1;
inline void LogicServerLoginReply::clear_issuccess() {
  issuccess_ = false;
}
inline bool LogicServerLoginReply::issuccess() const {
  // @@protoc_insertion_point(field_get:internalAgreement.LogicServerLoginReply.isSuccess)
  return issuccess_;
}
inline void LogicServerLoginReply::set_issuccess(bool value) {
  
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:internalAgreement.LogicServerLoginReply.isSuccess)
}

// optional int32 id = 2;
inline void LogicServerLoginReply::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 LogicServerLoginReply::id() const {
  // @@protoc_insertion_point(field_get:internalAgreement.LogicServerLoginReply.id)
  return id_;
}
inline void LogicServerLoginReply::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:internalAgreement.LogicServerLoginReply.id)
}

// -------------------------------------------------------------------

// LogicServerKickPlayer

// optional int64 RoleRuntimeID = 1;
inline void LogicServerKickPlayer::clear_roleruntimeid() {
  roleruntimeid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LogicServerKickPlayer::roleruntimeid() const {
  // @@protoc_insertion_point(field_get:internalAgreement.LogicServerKickPlayer.RoleRuntimeID)
  return roleruntimeid_;
}
inline void LogicServerKickPlayer::set_roleruntimeid(::google::protobuf::int64 value) {
  
  roleruntimeid_ = value;
  // @@protoc_insertion_point(field_set:internalAgreement.LogicServerKickPlayer.RoleRuntimeID)
}

// -------------------------------------------------------------------

// LogicServerSetRoleSlave

// optional int64 RoleRuntimeID = 1;
inline void LogicServerSetRoleSlave::clear_roleruntimeid() {
  roleruntimeid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LogicServerSetRoleSlave::roleruntimeid() const {
  // @@protoc_insertion_point(field_get:internalAgreement.LogicServerSetRoleSlave.RoleRuntimeID)
  return roleruntimeid_;
}
inline void LogicServerSetRoleSlave::set_roleruntimeid(::google::protobuf::int64 value) {
  
  roleruntimeid_ = value;
  // @@protoc_insertion_point(field_set:internalAgreement.LogicServerSetRoleSlave.RoleRuntimeID)
}

// optional bool isSet = 2;
inline void LogicServerSetRoleSlave::clear_isset() {
  isset_ = false;
}
inline bool LogicServerSetRoleSlave::isset() const {
  // @@protoc_insertion_point(field_get:internalAgreement.LogicServerSetRoleSlave.isSet)
  return isset_;
}
inline void LogicServerSetRoleSlave::set_isset(bool value) {
  
  isset_ = value;
  // @@protoc_insertion_point(field_set:internalAgreement.LogicServerSetRoleSlave.isSet)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace internalAgreement

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LogicServerWithConnectionServer_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServerConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ServerConfig {

namespace {

const ::google::protobuf::Descriptor* CenterServerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterServerConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* EtcdAddr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EtcdAddr_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectionServerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectionServerConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicServerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicServerConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ServerConfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ServerConfig_2eproto() {
  protobuf_AddDesc_ServerConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ServerConfig.proto");
  GOOGLE_CHECK(file != NULL);
  CenterServerConfig_descriptor_ = file->message_type(0);
  static const int CenterServerConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterServerConfig, enableipv6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterServerConfig, bindip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterServerConfig, listenport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterServerConfig, logicserverloginpassword_),
  };
  CenterServerConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CenterServerConfig_descriptor_,
      CenterServerConfig::default_instance_,
      CenterServerConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(CenterServerConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterServerConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterServerConfig, _is_default_instance_));
  EtcdAddr_descriptor_ = file->message_type(1);
  static const int EtcdAddr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcdAddr, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcdAddr, port_),
  };
  EtcdAddr_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EtcdAddr_descriptor_,
      EtcdAddr::default_instance_,
      EtcdAddr_offsets_,
      -1,
      -1,
      -1,
      sizeof(EtcdAddr),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcdAddr, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcdAddr, _is_default_instance_));
  ConnectionServerConfig_descriptor_ = file->message_type(2);
  static const int ConnectionServerConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionServerConfig, enableipv6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionServerConfig, bindip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionServerConfig, portforclient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionServerConfig, portforlogicserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionServerConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionServerConfig, etcdservers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionServerConfig, logicserverloginpassword_),
  };
  ConnectionServerConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConnectionServerConfig_descriptor_,
      ConnectionServerConfig::default_instance_,
      ConnectionServerConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConnectionServerConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionServerConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionServerConfig, _is_default_instance_));
  LogicServerConfig_descriptor_ = file->message_type(3);
  static const int LogicServerConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerConfig, isprimary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerConfig, etcdservers_),
  };
  LogicServerConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogicServerConfig_descriptor_,
      LogicServerConfig::default_instance_,
      LogicServerConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogicServerConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerConfig, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ServerConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CenterServerConfig_descriptor_, &CenterServerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EtcdAddr_descriptor_, &EtcdAddr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConnectionServerConfig_descriptor_, &ConnectionServerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogicServerConfig_descriptor_, &LogicServerConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ServerConfig_2eproto() {
  delete CenterServerConfig::default_instance_;
  delete CenterServerConfig_reflection_;
  delete EtcdAddr::default_instance_;
  delete EtcdAddr_reflection_;
  delete ConnectionServerConfig::default_instance_;
  delete ConnectionServerConfig_reflection_;
  delete LogicServerConfig::default_instance_;
  delete LogicServerConfig_reflection_;
}

void protobuf_AddDesc_ServerConfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ServerConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ServerConfig.proto\022\014ServerConfig\"n\n\022Ce"
    "nterServerConfig\022\022\n\nenableIPV6\030\001 \001(\010\022\016\n\006"
    "bindIP\030\002 \001(\t\022\022\n\nlistenPort\030\003 \001(\005\022 \n\030logi"
    "cServerLoginPassword\030\004 \001(\t\"$\n\010EtcdAddr\022\n"
    "\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\005\"\312\001\n\026ConnectionS"
    "erverConfig\022\022\n\nenableIPV6\030\001 \001(\010\022\016\n\006bindI"
    "P\030\002 \001(\t\022\025\n\rportForClient\030\003 \001(\005\022\032\n\022portFo"
    "rLogicServer\030\004 \001(\005\022\n\n\002id\030\005 \001(\005\022+\n\013etcdse"
    "rvers\030\006 \003(\0132\026.ServerConfig.EtcdAddr\022 \n\030l"
    "ogicServerLoginPassword\030\007 \001(\t\"_\n\021LogicSe"
    "rverConfig\022\n\n\002id\030\001 \001(\005\022\021\n\tisPrimary\030\002 \001("
    "\010\022+\n\013etcdservers\030\003 \003(\0132\026.ServerConfig.Et"
    "cdAddrb\006proto3", 494);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServerConfig.proto", &protobuf_RegisterTypes);
  CenterServerConfig::default_instance_ = new CenterServerConfig();
  EtcdAddr::default_instance_ = new EtcdAddr();
  ConnectionServerConfig::default_instance_ = new ConnectionServerConfig();
  LogicServerConfig::default_instance_ = new LogicServerConfig();
  CenterServerConfig::default_instance_->InitAsDefaultInstance();
  EtcdAddr::default_instance_->InitAsDefaultInstance();
  ConnectionServerConfig::default_instance_->InitAsDefaultInstance();
  LogicServerConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServerConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServerConfig_2eproto {
  StaticDescriptorInitializer_ServerConfig_2eproto() {
    protobuf_AddDesc_ServerConfig_2eproto();
  }
} static_descriptor_initializer_ServerConfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CenterServerConfig::kEnableIPV6FieldNumber;
const int CenterServerConfig::kBindIPFieldNumber;
const int CenterServerConfig::kListenPortFieldNumber;
const int CenterServerConfig::kLogicServerLoginPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CenterServerConfig::CenterServerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerConfig.CenterServerConfig)
}

void CenterServerConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CenterServerConfig::CenterServerConfig(const CenterServerConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerConfig.CenterServerConfig)
}

void CenterServerConfig::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  enableipv6_ = false;
  bindip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  listenport_ = 0;
  logicserverloginpassword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CenterServerConfig::~CenterServerConfig() {
  // @@protoc_insertion_point(destructor:ServerConfig.CenterServerConfig)
  SharedDtor();
}

void CenterServerConfig::SharedDtor() {
  bindip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logicserverloginpassword_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CenterServerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterServerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterServerConfig_descriptor_;
}

const CenterServerConfig& CenterServerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerConfig_2eproto();
  return *default_instance_;
}

CenterServerConfig* CenterServerConfig::default_instance_ = NULL;

CenterServerConfig* CenterServerConfig::New(::google::protobuf::Arena* arena) const {
  CenterServerConfig* n = new CenterServerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CenterServerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerConfig.CenterServerConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CenterServerConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CenterServerConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(enableipv6_, listenport_);
  bindip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logicserverloginpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool CenterServerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerConfig.CenterServerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enableIPV6 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enableipv6_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bindIP;
        break;
      }

      // optional string bindIP = 2;
      case 2: {
        if (tag == 18) {
         parse_bindIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bindip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bindip().data(), this->bindip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ServerConfig.CenterServerConfig.bindIP"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_listenPort;
        break;
      }

      // optional int32 listenPort = 3;
      case 3: {
        if (tag == 24) {
         parse_listenPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listenport_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_logicServerLoginPassword;
        break;
      }

      // optional string logicServerLoginPassword = 4;
      case 4: {
        if (tag == 34) {
         parse_logicServerLoginPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logicserverloginpassword()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->logicserverloginpassword().data(), this->logicserverloginpassword().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ServerConfig.CenterServerConfig.logicServerLoginPassword"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerConfig.CenterServerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerConfig.CenterServerConfig)
  return false;
#undef DO_
}

void CenterServerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerConfig.CenterServerConfig)
  // optional bool enableIPV6 = 1;
  if (this->enableipv6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enableipv6(), output);
  }

  // optional string bindIP = 2;
  if (this->bindip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bindip().data(), this->bindip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerConfig.CenterServerConfig.bindIP");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bindip(), output);
  }

  // optional int32 listenPort = 3;
  if (this->listenport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->listenport(), output);
  }

  // optional string logicServerLoginPassword = 4;
  if (this->logicserverloginpassword().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logicserverloginpassword().data(), this->logicserverloginpassword().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerConfig.CenterServerConfig.logicServerLoginPassword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->logicserverloginpassword(), output);
  }

  // @@protoc_insertion_point(serialize_end:ServerConfig.CenterServerConfig)
}

::google::protobuf::uint8* CenterServerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerConfig.CenterServerConfig)
  // optional bool enableIPV6 = 1;
  if (this->enableipv6() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enableipv6(), target);
  }

  // optional string bindIP = 2;
  if (this->bindip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bindip().data(), this->bindip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerConfig.CenterServerConfig.bindIP");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bindip(), target);
  }

  // optional int32 listenPort = 3;
  if (this->listenport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->listenport(), target);
  }

  // optional string logicServerLoginPassword = 4;
  if (this->logicserverloginpassword().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logicserverloginpassword().data(), this->logicserverloginpassword().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerConfig.CenterServerConfig.logicServerLoginPassword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->logicserverloginpassword(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ServerConfig.CenterServerConfig)
  return target;
}

int CenterServerConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ServerConfig.CenterServerConfig)
  int total_size = 0;

  // optional bool enableIPV6 = 1;
  if (this->enableipv6() != 0) {
    total_size += 1 + 1;
  }

  // optional string bindIP = 2;
  if (this->bindip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bindip());
  }

  // optional int32 listenPort = 3;
  if (this->listenport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->listenport());
  }

  // optional string logicServerLoginPassword = 4;
  if (this->logicserverloginpassword().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->logicserverloginpassword());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterServerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerConfig.CenterServerConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CenterServerConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CenterServerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerConfig.CenterServerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerConfig.CenterServerConfig)
    MergeFrom(*source);
  }
}

void CenterServerConfig::MergeFrom(const CenterServerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerConfig.CenterServerConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.enableipv6() != 0) {
    set_enableipv6(from.enableipv6());
  }
  if (from.bindip().size() > 0) {

    bindip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bindip_);
  }
  if (from.listenport() != 0) {
    set_listenport(from.listenport());
  }
  if (from.logicserverloginpassword().size() > 0) {

    logicserverloginpassword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logicserverloginpassword_);
  }
}

void CenterServerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerConfig.CenterServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterServerConfig::CopyFrom(const CenterServerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerConfig.CenterServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterServerConfig::IsInitialized() const {

  return true;
}

void CenterServerConfig::Swap(CenterServerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CenterServerConfig::InternalSwap(CenterServerConfig* other) {
  std::swap(enableipv6_, other->enableipv6_);
  bindip_.Swap(&other->bindip_);
  std::swap(listenport_, other->listenport_);
  logicserverloginpassword_.Swap(&other->logicserverloginpassword_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CenterServerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterServerConfig_descriptor_;
  metadata.reflection = CenterServerConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CenterServerConfig

// optional bool enableIPV6 = 1;
void CenterServerConfig::clear_enableipv6() {
  enableipv6_ = false;
}
 bool CenterServerConfig::enableipv6() const {
  // @@protoc_insertion_point(field_get:ServerConfig.CenterServerConfig.enableIPV6)
  return enableipv6_;
}
 void CenterServerConfig::set_enableipv6(bool value) {
  
  enableipv6_ = value;
  // @@protoc_insertion_point(field_set:ServerConfig.CenterServerConfig.enableIPV6)
}

// optional string bindIP = 2;
void CenterServerConfig::clear_bindip() {
  bindip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CenterServerConfig::bindip() const {
  // @@protoc_insertion_point(field_get:ServerConfig.CenterServerConfig.bindIP)
  return bindip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CenterServerConfig::set_bindip(const ::std::string& value) {
  
  bindip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerConfig.CenterServerConfig.bindIP)
}
 void CenterServerConfig::set_bindip(const char* value) {
  
  bindip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerConfig.CenterServerConfig.bindIP)
}
 void CenterServerConfig::set_bindip(const char* value, size_t size) {
  
  bindip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerConfig.CenterServerConfig.bindIP)
}
 ::std::string* CenterServerConfig::mutable_bindip() {
  
  // @@protoc_insertion_point(field_mutable:ServerConfig.CenterServerConfig.bindIP)
  return bindip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CenterServerConfig::release_bindip() {
  // @@protoc_insertion_point(field_release:ServerConfig.CenterServerConfig.bindIP)
  
  return bindip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CenterServerConfig::set_allocated_bindip(::std::string* bindip) {
  if (bindip != NULL) {
    
  } else {
    
  }
  bindip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindip);
  // @@protoc_insertion_point(field_set_allocated:ServerConfig.CenterServerConfig.bindIP)
}

// optional int32 listenPort = 3;
void CenterServerConfig::clear_listenport() {
  listenport_ = 0;
}
 ::google::protobuf::int32 CenterServerConfig::listenport() const {
  // @@protoc_insertion_point(field_get:ServerConfig.CenterServerConfig.listenPort)
  return listenport_;
}
 void CenterServerConfig::set_listenport(::google::protobuf::int32 value) {
  
  listenport_ = value;
  // @@protoc_insertion_point(field_set:ServerConfig.CenterServerConfig.listenPort)
}

// optional string logicServerLoginPassword = 4;
void CenterServerConfig::clear_logicserverloginpassword() {
  logicserverloginpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CenterServerConfig::logicserverloginpassword() const {
  // @@protoc_insertion_point(field_get:ServerConfig.CenterServerConfig.logicServerLoginPassword)
  return logicserverloginpassword_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CenterServerConfig::set_logicserverloginpassword(const ::std::string& value) {
  
  logicserverloginpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerConfig.CenterServerConfig.logicServerLoginPassword)
}
 void CenterServerConfig::set_logicserverloginpassword(const char* value) {
  
  logicserverloginpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerConfig.CenterServerConfig.logicServerLoginPassword)
}
 void CenterServerConfig::set_logicserverloginpassword(const char* value, size_t size) {
  
  logicserverloginpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerConfig.CenterServerConfig.logicServerLoginPassword)
}
 ::std::string* CenterServerConfig::mutable_logicserverloginpassword() {
  
  // @@protoc_insertion_point(field_mutable:ServerConfig.CenterServerConfig.logicServerLoginPassword)
  return logicserverloginpassword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CenterServerConfig::release_logicserverloginpassword() {
  // @@protoc_insertion_point(field_release:ServerConfig.CenterServerConfig.logicServerLoginPassword)
  
  return logicserverloginpassword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CenterServerConfig::set_allocated_logicserverloginpassword(::std::string* logicserverloginpassword) {
  if (logicserverloginpassword != NULL) {
    
  } else {
    
  }
  logicserverloginpassword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logicserverloginpassword);
  // @@protoc_insertion_point(field_set_allocated:ServerConfig.CenterServerConfig.logicServerLoginPassword)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EtcdAddr::kIpFieldNumber;
const int EtcdAddr::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EtcdAddr::EtcdAddr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerConfig.EtcdAddr)
}

void EtcdAddr::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EtcdAddr::EtcdAddr(const EtcdAddr& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerConfig.EtcdAddr)
}

void EtcdAddr::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

EtcdAddr::~EtcdAddr() {
  // @@protoc_insertion_point(destructor:ServerConfig.EtcdAddr)
  SharedDtor();
}

void EtcdAddr::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void EtcdAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EtcdAddr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EtcdAddr_descriptor_;
}

const EtcdAddr& EtcdAddr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerConfig_2eproto();
  return *default_instance_;
}

EtcdAddr* EtcdAddr::default_instance_ = NULL;

EtcdAddr* EtcdAddr::New(::google::protobuf::Arena* arena) const {
  EtcdAddr* n = new EtcdAddr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EtcdAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerConfig.EtcdAddr)
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

bool EtcdAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerConfig.EtcdAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ServerConfig.EtcdAddr.ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerConfig.EtcdAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerConfig.EtcdAddr)
  return false;
#undef DO_
}

void EtcdAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerConfig.EtcdAddr)
  // optional string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerConfig.EtcdAddr.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // @@protoc_insertion_point(serialize_end:ServerConfig.EtcdAddr)
}

::google::protobuf::uint8* EtcdAddr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerConfig.EtcdAddr)
  // optional string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerConfig.EtcdAddr.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ServerConfig.EtcdAddr)
  return target;
}

int EtcdAddr::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ServerConfig.EtcdAddr)
  int total_size = 0;

  // optional string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // optional int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EtcdAddr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerConfig.EtcdAddr)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EtcdAddr* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EtcdAddr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerConfig.EtcdAddr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerConfig.EtcdAddr)
    MergeFrom(*source);
  }
}

void EtcdAddr::MergeFrom(const EtcdAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerConfig.EtcdAddr)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void EtcdAddr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerConfig.EtcdAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EtcdAddr::CopyFrom(const EtcdAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerConfig.EtcdAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EtcdAddr::IsInitialized() const {

  return true;
}

void EtcdAddr::Swap(EtcdAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EtcdAddr::InternalSwap(EtcdAddr* other) {
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EtcdAddr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EtcdAddr_descriptor_;
  metadata.reflection = EtcdAddr_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EtcdAddr

// optional string ip = 1;
void EtcdAddr::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& EtcdAddr::ip() const {
  // @@protoc_insertion_point(field_get:ServerConfig.EtcdAddr.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EtcdAddr::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerConfig.EtcdAddr.ip)
}
 void EtcdAddr::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerConfig.EtcdAddr.ip)
}
 void EtcdAddr::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerConfig.EtcdAddr.ip)
}
 ::std::string* EtcdAddr::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:ServerConfig.EtcdAddr.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EtcdAddr::release_ip() {
  // @@protoc_insertion_point(field_release:ServerConfig.EtcdAddr.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EtcdAddr::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:ServerConfig.EtcdAddr.ip)
}

// optional int32 port = 2;
void EtcdAddr::clear_port() {
  port_ = 0;
}
 ::google::protobuf::int32 EtcdAddr::port() const {
  // @@protoc_insertion_point(field_get:ServerConfig.EtcdAddr.port)
  return port_;
}
 void EtcdAddr::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:ServerConfig.EtcdAddr.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectionServerConfig::kEnableIPV6FieldNumber;
const int ConnectionServerConfig::kBindIPFieldNumber;
const int ConnectionServerConfig::kPortForClientFieldNumber;
const int ConnectionServerConfig::kPortForLogicServerFieldNumber;
const int ConnectionServerConfig::kIdFieldNumber;
const int ConnectionServerConfig::kEtcdserversFieldNumber;
const int ConnectionServerConfig::kLogicServerLoginPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectionServerConfig::ConnectionServerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerConfig.ConnectionServerConfig)
}

void ConnectionServerConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ConnectionServerConfig::ConnectionServerConfig(const ConnectionServerConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerConfig.ConnectionServerConfig)
}

void ConnectionServerConfig::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  enableipv6_ = false;
  bindip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  portforclient_ = 0;
  portforlogicserver_ = 0;
  id_ = 0;
  logicserverloginpassword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ConnectionServerConfig::~ConnectionServerConfig() {
  // @@protoc_insertion_point(destructor:ServerConfig.ConnectionServerConfig)
  SharedDtor();
}

void ConnectionServerConfig::SharedDtor() {
  bindip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logicserverloginpassword_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ConnectionServerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionServerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionServerConfig_descriptor_;
}

const ConnectionServerConfig& ConnectionServerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerConfig_2eproto();
  return *default_instance_;
}

ConnectionServerConfig* ConnectionServerConfig::default_instance_ = NULL;

ConnectionServerConfig* ConnectionServerConfig::New(::google::protobuf::Arena* arena) const {
  ConnectionServerConfig* n = new ConnectionServerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectionServerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerConfig.ConnectionServerConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ConnectionServerConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConnectionServerConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(enableipv6_, id_);
  bindip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logicserverloginpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  etcdservers_.Clear();
}

bool ConnectionServerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerConfig.ConnectionServerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enableIPV6 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enableipv6_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bindIP;
        break;
      }

      // optional string bindIP = 2;
      case 2: {
        if (tag == 18) {
         parse_bindIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bindip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bindip().data(), this->bindip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ServerConfig.ConnectionServerConfig.bindIP"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_portForClient;
        break;
      }

      // optional int32 portForClient = 3;
      case 3: {
        if (tag == 24) {
         parse_portForClient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &portforclient_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_portForLogicServer;
        break;
      }

      // optional int32 portForLogicServer = 4;
      case 4: {
        if (tag == 32) {
         parse_portForLogicServer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &portforlogicserver_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // optional int32 id = 5;
      case 5: {
        if (tag == 40) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_etcdservers;
        break;
      }

      // repeated .ServerConfig.EtcdAddr etcdservers = 6;
      case 6: {
        if (tag == 50) {
         parse_etcdservers:
          DO_(input->IncrementRecursionDepth());
         parse_loop_etcdservers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_etcdservers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_etcdservers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(58)) goto parse_logicServerLoginPassword;
        break;
      }

      // optional string logicServerLoginPassword = 7;
      case 7: {
        if (tag == 58) {
         parse_logicServerLoginPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logicserverloginpassword()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->logicserverloginpassword().data(), this->logicserverloginpassword().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ServerConfig.ConnectionServerConfig.logicServerLoginPassword"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerConfig.ConnectionServerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerConfig.ConnectionServerConfig)
  return false;
#undef DO_
}

void ConnectionServerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerConfig.ConnectionServerConfig)
  // optional bool enableIPV6 = 1;
  if (this->enableipv6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enableipv6(), output);
  }

  // optional string bindIP = 2;
  if (this->bindip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bindip().data(), this->bindip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerConfig.ConnectionServerConfig.bindIP");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bindip(), output);
  }

  // optional int32 portForClient = 3;
  if (this->portforclient() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->portforclient(), output);
  }

  // optional int32 portForLogicServer = 4;
  if (this->portforlogicserver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->portforlogicserver(), output);
  }

  // optional int32 id = 5;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->id(), output);
  }

  // repeated .ServerConfig.EtcdAddr etcdservers = 6;
  for (unsigned int i = 0, n = this->etcdservers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->etcdservers(i), output);
  }

  // optional string logicServerLoginPassword = 7;
  if (this->logicserverloginpassword().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logicserverloginpassword().data(), this->logicserverloginpassword().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerConfig.ConnectionServerConfig.logicServerLoginPassword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->logicserverloginpassword(), output);
  }

  // @@protoc_insertion_point(serialize_end:ServerConfig.ConnectionServerConfig)
}

::google::protobuf::uint8* ConnectionServerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerConfig.ConnectionServerConfig)
  // optional bool enableIPV6 = 1;
  if (this->enableipv6() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enableipv6(), target);
  }

  // optional string bindIP = 2;
  if (this->bindip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bindip().data(), this->bindip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerConfig.ConnectionServerConfig.bindIP");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bindip(), target);
  }

  // optional int32 portForClient = 3;
  if (this->portforclient() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->portforclient(), target);
  }

  // optional int32 portForLogicServer = 4;
  if (this->portforlogicserver() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->portforlogicserver(), target);
  }

  // optional int32 id = 5;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->id(), target);
  }

  // repeated .ServerConfig.EtcdAddr etcdservers = 6;
  for (unsigned int i = 0, n = this->etcdservers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->etcdservers(i), false, target);
  }

  // optional string logicServerLoginPassword = 7;
  if (this->logicserverloginpassword().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logicserverloginpassword().data(), this->logicserverloginpassword().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerConfig.ConnectionServerConfig.logicServerLoginPassword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->logicserverloginpassword(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ServerConfig.ConnectionServerConfig)
  return target;
}

int ConnectionServerConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ServerConfig.ConnectionServerConfig)
  int total_size = 0;

  // optional bool enableIPV6 = 1;
  if (this->enableipv6() != 0) {
    total_size += 1 + 1;
  }

  // optional string bindIP = 2;
  if (this->bindip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bindip());
  }

  // optional int32 portForClient = 3;
  if (this->portforclient() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->portforclient());
  }

  // optional int32 portForLogicServer = 4;
  if (this->portforlogicserver() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->portforlogicserver());
  }

  // optional int32 id = 5;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional string logicServerLoginPassword = 7;
  if (this->logicserverloginpassword().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->logicserverloginpassword());
  }

  // repeated .ServerConfig.EtcdAddr etcdservers = 6;
  total_size += 1 * this->etcdservers_size();
  for (int i = 0; i < this->etcdservers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->etcdservers(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionServerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerConfig.ConnectionServerConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConnectionServerConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectionServerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerConfig.ConnectionServerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerConfig.ConnectionServerConfig)
    MergeFrom(*source);
  }
}

void ConnectionServerConfig::MergeFrom(const ConnectionServerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerConfig.ConnectionServerConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  etcdservers_.MergeFrom(from.etcdservers_);
  if (from.enableipv6() != 0) {
    set_enableipv6(from.enableipv6());
  }
  if (from.bindip().size() > 0) {

    bindip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bindip_);
  }
  if (from.portforclient() != 0) {
    set_portforclient(from.portforclient());
  }
  if (from.portforlogicserver() != 0) {
    set_portforlogicserver(from.portforlogicserver());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.logicserverloginpassword().size() > 0) {

    logicserverloginpassword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logicserverloginpassword_);
  }
}

void ConnectionServerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerConfig.ConnectionServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionServerConfig::CopyFrom(const ConnectionServerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerConfig.ConnectionServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionServerConfig::IsInitialized() const {

  return true;
}

void ConnectionServerConfig::Swap(ConnectionServerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectionServerConfig::InternalSwap(ConnectionServerConfig* other) {
  std::swap(enableipv6_, other->enableipv6_);
  bindip_.Swap(&other->bindip_);
  std::swap(portforclient_, other->portforclient_);
  std::swap(portforlogicserver_, other->portforlogicserver_);
  std::swap(id_, other->id_);
  etcdservers_.UnsafeArenaSwap(&other->etcdservers_);
  logicserverloginpassword_.Swap(&other->logicserverloginpassword_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectionServerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectionServerConfig_descriptor_;
  metadata.reflection = ConnectionServerConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectionServerConfig

// optional bool enableIPV6 = 1;
void ConnectionServerConfig::clear_enableipv6() {
  enableipv6_ = false;
}
 bool ConnectionServerConfig::enableipv6() const {
  // @@protoc_insertion_point(field_get:ServerConfig.ConnectionServerConfig.enableIPV6)
  return enableipv6_;
}
 void ConnectionServerConfig::set_enableipv6(bool value) {
  
  enableipv6_ = value;
  // @@protoc_insertion_point(field_set:ServerConfig.ConnectionServerConfig.enableIPV6)
}

// optional string bindIP = 2;
void ConnectionServerConfig::clear_bindip() {
  bindip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ConnectionServerConfig::bindip() const {
  // @@protoc_insertion_point(field_get:ServerConfig.ConnectionServerConfig.bindIP)
  return bindip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionServerConfig::set_bindip(const ::std::string& value) {
  
  bindip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerConfig.ConnectionServerConfig.bindIP)
}
 void ConnectionServerConfig::set_bindip(const char* value) {
  
  bindip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerConfig.ConnectionServerConfig.bindIP)
}
 void ConnectionServerConfig::set_bindip(const char* value, size_t size) {
  
  bindip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerConfig.ConnectionServerConfig.bindIP)
}
 ::std::string* ConnectionServerConfig::mutable_bindip() {
  
  // @@protoc_insertion_point(field_mutable:ServerConfig.ConnectionServerConfig.bindIP)
  return bindip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnectionServerConfig::release_bindip() {
  // @@protoc_insertion_point(field_release:ServerConfig.ConnectionServerConfig.bindIP)
  
  return bindip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionServerConfig::set_allocated_bindip(::std::string* bindip) {
  if (bindip != NULL) {
    
  } else {
    
  }
  bindip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindip);
  // @@protoc_insertion_point(field_set_allocated:ServerConfig.ConnectionServerConfig.bindIP)
}

// optional int32 portForClient = 3;
void ConnectionServerConfig::clear_portforclient() {
  portforclient_ = 0;
}
 ::google::protobuf::int32 ConnectionServerConfig::portforclient() const {
  // @@protoc_insertion_point(field_get:ServerConfig.ConnectionServerConfig.portForClient)
  return portforclient_;
}
 void ConnectionServerConfig::set_portforclient(::google::protobuf::int32 value) {
  
  portforclient_ = value;
  // @@protoc_insertion_point(field_set:ServerConfig.ConnectionServerConfig.portForClient)
}

// optional int32 portForLogicServer = 4;
void ConnectionServerConfig::clear_portforlogicserver() {
  portforlogicserver_ = 0;
}
 ::google::protobuf::int32 ConnectionServerConfig::portforlogicserver() const {
  // @@protoc_insertion_point(field_get:ServerConfig.ConnectionServerConfig.portForLogicServer)
  return portforlogicserver_;
}
 void ConnectionServerConfig::set_portforlogicserver(::google::protobuf::int32 value) {
  
  portforlogicserver_ = value;
  // @@protoc_insertion_point(field_set:ServerConfig.ConnectionServerConfig.portForLogicServer)
}

// optional int32 id = 5;
void ConnectionServerConfig::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 ConnectionServerConfig::id() const {
  // @@protoc_insertion_point(field_get:ServerConfig.ConnectionServerConfig.id)
  return id_;
}
 void ConnectionServerConfig::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerConfig.ConnectionServerConfig.id)
}

// repeated .ServerConfig.EtcdAddr etcdservers = 6;
int ConnectionServerConfig::etcdservers_size() const {
  return etcdservers_.size();
}
void ConnectionServerConfig::clear_etcdservers() {
  etcdservers_.Clear();
}
const ::ServerConfig::EtcdAddr& ConnectionServerConfig::etcdservers(int index) const {
  // @@protoc_insertion_point(field_get:ServerConfig.ConnectionServerConfig.etcdservers)
  return etcdservers_.Get(index);
}
::ServerConfig::EtcdAddr* ConnectionServerConfig::mutable_etcdservers(int index) {
  // @@protoc_insertion_point(field_mutable:ServerConfig.ConnectionServerConfig.etcdservers)
  return etcdservers_.Mutable(index);
}
::ServerConfig::EtcdAddr* ConnectionServerConfig::add_etcdservers() {
  // @@protoc_insertion_point(field_add:ServerConfig.ConnectionServerConfig.etcdservers)
  return etcdservers_.Add();
}
::google::protobuf::RepeatedPtrField< ::ServerConfig::EtcdAddr >*
ConnectionServerConfig::mutable_etcdservers() {
  // @@protoc_insertion_point(field_mutable_list:ServerConfig.ConnectionServerConfig.etcdservers)
  return &etcdservers_;
}
const ::google::protobuf::RepeatedPtrField< ::ServerConfig::EtcdAddr >&
ConnectionServerConfig::etcdservers() const {
  // @@protoc_insertion_point(field_list:ServerConfig.ConnectionServerConfig.etcdservers)
  return etcdservers_;
}

// optional string logicServerLoginPassword = 7;
void ConnectionServerConfig::clear_logicserverloginpassword() {
  logicserverloginpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ConnectionServerConfig::logicserverloginpassword() const {
  // @@protoc_insertion_point(field_get:ServerConfig.ConnectionServerConfig.logicServerLoginPassword)
  return logicserverloginpassword_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionServerConfig::set_logicserverloginpassword(const ::std::string& value) {
  
  logicserverloginpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerConfig.ConnectionServerConfig.logicServerLoginPassword)
}
 void ConnectionServerConfig::set_logicserverloginpassword(const char* value) {
  
  logicserverloginpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerConfig.ConnectionServerConfig.logicServerLoginPassword)
}
 void ConnectionServerConfig::set_logicserverloginpassword(const char* value, size_t size) {
  
  logicserverloginpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerConfig.ConnectionServerConfig.logicServerLoginPassword)
}
 ::std::string* ConnectionServerConfig::mutable_logicserverloginpassword() {
  
  // @@protoc_insertion_point(field_mutable:ServerConfig.ConnectionServerConfig.logicServerLoginPassword)
  return logicserverloginpassword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnectionServerConfig::release_logicserverloginpassword() {
  // @@protoc_insertion_point(field_release:ServerConfig.ConnectionServerConfig.logicServerLoginPassword)
  
  return logicserverloginpassword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionServerConfig::set_allocated_logicserverloginpassword(::std::string* logicserverloginpassword) {
  if (logicserverloginpassword != NULL) {
    
  } else {
    
  }
  logicserverloginpassword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logicserverloginpassword);
  // @@protoc_insertion_point(field_set_allocated:ServerConfig.ConnectionServerConfig.logicServerLoginPassword)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogicServerConfig::kIdFieldNumber;
const int LogicServerConfig::kIsPrimaryFieldNumber;
const int LogicServerConfig::kEtcdserversFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogicServerConfig::LogicServerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerConfig.LogicServerConfig)
}

void LogicServerConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LogicServerConfig::LogicServerConfig(const LogicServerConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerConfig.LogicServerConfig)
}

void LogicServerConfig::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
  isprimary_ = false;
}

LogicServerConfig::~LogicServerConfig() {
  // @@protoc_insertion_point(destructor:ServerConfig.LogicServerConfig)
  SharedDtor();
}

void LogicServerConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicServerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicServerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicServerConfig_descriptor_;
}

const LogicServerConfig& LogicServerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerConfig_2eproto();
  return *default_instance_;
}

LogicServerConfig* LogicServerConfig::default_instance_ = NULL;

LogicServerConfig* LogicServerConfig::New(::google::protobuf::Arena* arena) const {
  LogicServerConfig* n = new LogicServerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogicServerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerConfig.LogicServerConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LogicServerConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LogicServerConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, isprimary_);

#undef ZR_HELPER_
#undef ZR_

  etcdservers_.Clear();
}

bool LogicServerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerConfig.LogicServerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isPrimary;
        break;
      }

      // optional bool isPrimary = 2;
      case 2: {
        if (tag == 16) {
         parse_isPrimary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isprimary_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_etcdservers;
        break;
      }

      // repeated .ServerConfig.EtcdAddr etcdservers = 3;
      case 3: {
        if (tag == 26) {
         parse_etcdservers:
          DO_(input->IncrementRecursionDepth());
         parse_loop_etcdservers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_etcdservers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_etcdservers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerConfig.LogicServerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerConfig.LogicServerConfig)
  return false;
#undef DO_
}

void LogicServerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerConfig.LogicServerConfig)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bool isPrimary = 2;
  if (this->isprimary() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isprimary(), output);
  }

  // repeated .ServerConfig.EtcdAddr etcdservers = 3;
  for (unsigned int i = 0, n = this->etcdservers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->etcdservers(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ServerConfig.LogicServerConfig)
}

::google::protobuf::uint8* LogicServerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerConfig.LogicServerConfig)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bool isPrimary = 2;
  if (this->isprimary() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isprimary(), target);
  }

  // repeated .ServerConfig.EtcdAddr etcdservers = 3;
  for (unsigned int i = 0, n = this->etcdservers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->etcdservers(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ServerConfig.LogicServerConfig)
  return target;
}

int LogicServerConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ServerConfig.LogicServerConfig)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional bool isPrimary = 2;
  if (this->isprimary() != 0) {
    total_size += 1 + 1;
  }

  // repeated .ServerConfig.EtcdAddr etcdservers = 3;
  total_size += 1 * this->etcdservers_size();
  for (int i = 0; i < this->etcdservers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->etcdservers(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicServerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerConfig.LogicServerConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogicServerConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogicServerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerConfig.LogicServerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerConfig.LogicServerConfig)
    MergeFrom(*source);
  }
}

void LogicServerConfig::MergeFrom(const LogicServerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerConfig.LogicServerConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  etcdservers_.MergeFrom(from.etcdservers_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.isprimary() != 0) {
    set_isprimary(from.isprimary());
  }
}

void LogicServerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerConfig.LogicServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicServerConfig::CopyFrom(const LogicServerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerConfig.LogicServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicServerConfig::IsInitialized() const {

  return true;
}

void LogicServerConfig::Swap(LogicServerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogicServerConfig::InternalSwap(LogicServerConfig* other) {
  std::swap(id_, other->id_);
  std::swap(isprimary_, other->isprimary_);
  etcdservers_.UnsafeArenaSwap(&other->etcdservers_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogicServerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicServerConfig_descriptor_;
  metadata.reflection = LogicServerConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogicServerConfig

// optional int32 id = 1;
void LogicServerConfig::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 LogicServerConfig::id() const {
  // @@protoc_insertion_point(field_get:ServerConfig.LogicServerConfig.id)
  return id_;
}
 void LogicServerConfig::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerConfig.LogicServerConfig.id)
}

// optional bool isPrimary = 2;
void LogicServerConfig::clear_isprimary() {
  isprimary_ = false;
}
 bool LogicServerConfig::isprimary() const {
  // @@protoc_insertion_point(field_get:ServerConfig.LogicServerConfig.isPrimary)
  return isprimary_;
}
 void LogicServerConfig::set_isprimary(bool value) {
  
  isprimary_ = value;
  // @@protoc_insertion_point(field_set:ServerConfig.LogicServerConfig.isPrimary)
}

// repeated .ServerConfig.EtcdAddr etcdservers = 3;
int LogicServerConfig::etcdservers_size() const {
  return etcdservers_.size();
}
void LogicServerConfig::clear_etcdservers() {
  etcdservers_.Clear();
}
const ::ServerConfig::EtcdAddr& LogicServerConfig::etcdservers(int index) const {
  // @@protoc_insertion_point(field_get:ServerConfig.LogicServerConfig.etcdservers)
  return etcdservers_.Get(index);
}
::ServerConfig::EtcdAddr* LogicServerConfig::mutable_etcdservers(int index) {
  // @@protoc_insertion_point(field_mutable:ServerConfig.LogicServerConfig.etcdservers)
  return etcdservers_.Mutable(index);
}
::ServerConfig::EtcdAddr* LogicServerConfig::add_etcdservers() {
  // @@protoc_insertion_point(field_add:ServerConfig.LogicServerConfig.etcdservers)
  return etcdservers_.Add();
}
::google::protobuf::RepeatedPtrField< ::ServerConfig::EtcdAddr >*
LogicServerConfig::mutable_etcdservers() {
  // @@protoc_insertion_point(field_mutable_list:ServerConfig.LogicServerConfig.etcdservers)
  return &etcdservers_;
}
const ::google::protobuf::RepeatedPtrField< ::ServerConfig::EtcdAddr >&
LogicServerConfig::etcdservers() const {
  // @@protoc_insertion_point(field_list:ServerConfig.LogicServerConfig.etcdservers)
  return etcdservers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ServerConfig

// @@protoc_insertion_point(global_scope)
